<?php
/**
 * MageWorx
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the MageWorx EULA that is bundled with
 * this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.mageworx.com/LICENSE-1.0.html
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade the extension
 * to newer versions in the future. If you wish to customize the extension
 * for your needs please refer to http://www.mageworx.com/ for more information
 *
 * @category   MageWorx
 * @package    MageWorx_CustomOptions
 * @copyright  Copyright (c) 2013 MageWorx (http://www.mageworx.com/)
 * @license    http://www.mageworx.com/LICENSE-1.0.html
 */

/**
 * Advanced Product Options extension
 *
 * @category   MageWorx
 * @package    MageWorx_CustomOptions
 * @author     MageWorx Dev Team
 */

 /* @var $this Mage_Adminhtml_Block_Catalog_Product_Composite_Fieldset_Options */
$options = Mage::helper('core')->decorateArray($this->getOptions());
$helper = Mage::helper('customoptions');
if (count($options)): ?>
    <style type="text/css">
        .product-options .options-list input.checkbox, .product-options .options-list input.radio {margin:3px;}
        
        .option a {text-decoration: none;}
        .option .special-price {color: #CD5033;}
        .option .small-image-preview {padding:3px;}
        .option li.swatch {display: inline;}
        .option img.swatch, .option div.swatch {margin: 1px;}
        .option img.swatch-selected, .option div.swatch-selected {border: 1px solid #000000;}

        .option div.container-swatch-color {
            display:inline-block; 
            width:<?php echo $helper->getImagesThumbnailsSize(); ?>px; 
            height:<?php echo $helper->getImagesThumbnailsSize(); ?>px;
        }
        .option div.swatch-color {
            display:inline-block;
            width:100%;
            height:100%;
        }
    </style>
    
    <?php echo $this->getChildHtml('options_js') ?>        
    <script type="text/javascript">
        <?php if ($helper->isTierPriceEnabled()) { ?>        
            optionTierPricesData = [];
        <?php } ?>
        opConfig = {'config':<?php echo $helper->getOptionsJsonConfig($this->getOptions()) ?>};
        
        // set qty product from option
        optionSetQtyProductData = [];
        optionSetQtyProduct = {
            defaultQty: 1,
            pricePerUnit: 0,
            setQty: function(optionId) {                
                if (!$('product_composite_configure_input_qty')) {
                    setTimeout('optionSetQtyProduct.setQty('+optionId+')', 500);
                    return;
                }
                var el = $('select_' + optionId);
                if (!el) el = $$("input[id^='options_"+optionId+"_']:checked").first();
                if (!el) return;                
                if (!optionSetQtyProductData[optionId]) return;
                if (!optionSetQtyProductData[optionId][el.value]) {
                    if (this.defaultQty!=$('product_composite_configure_input_qty').value) this.setTotalQty(this.defaultQty);
                    return;
                }                                
                if ($('options_'+optionId+'_qty')) var optionQty = parseInt($('options_'+optionId+'_qty').value); else var optionQty = 1;
                this.setTotalQty(optionSetQtyProductData[optionId][el.value] * optionQty);
            },
            setTotalQty: function(qty) {
                $('product_composite_configure_input_qty').value = qty;
            },
            hideQty: function() {
                if (!$('product_composite_configure_input_qty')) {
                    setTimeout('optionSetQtyProduct.hideQty()', 100);
                    return;
                }                
                //$('product_composite_configure_input_qty').previous('label').style.visibility = 'hidden';
                //$('product_composite_configure_input_qty').style.visibility = 'hidden';
                $('product_composite_configure_input_qty').writeAttribute('readonly', 'readonly');
            },
            checkboxQty: function(el) {
                var elIdArr = el.id.split('_');
                var optionId = 0;
                if (elIdArr[1]) optionId = elIdArr[1];
                
                var elQty = $('options_'+ optionId +'_'+ el.value +'_qty');
                if (!elQty) return;
                elQty.disabled=!el.checked;
                
                if (el.checked) {
                    if (elQty.value<=0) elQty.value = 1;
                    $(elQty).addClassName('validate-greater-than-zero');
                } else {
                    elQty.value = 0;
                    $(elQty).removeClassName('validate-greater-than-zero');
                }
                
            }
        };
        
        // swatch class
        optionSwatch = {
            select: function(optionId, optionValueId) {
                // change value
                var sel = $('select_' + optionId);
                if (!sel) return;
                if (sel.value==optionValueId) {
                    optionValueId = '';
                }
                sel.value = optionValueId;
                $(sel).onchange();
            },
            change:function(el) {
                optionId = el.id.replace('select_', '');
                
                //change border
                var ul = $('ul_swatch_' + optionId);
                if (!ul) return;
                
                var imgs = ul.getElementsByTagName('img');
                for (i=0; i < imgs.length; i++) {
                    if ($(imgs[i]).hasClassName('swatch-selected')) {
                        $(imgs[i]).removeClassName('swatch-selected');
                        $(imgs[i]).addClassName('swatch');
                    }
                }
                
                var divs = ul.getElementsByTagName('div');
                for (i=0; i < divs.length; i++) {
                    if ($(divs[i]).hasClassName('swatch-selected')) {
                        $(divs[i]).removeClassName('swatch-selected');
                        $(divs[i]).addClassName('swatch');
                    }   
                }
                
                var span = $('span_swatch_' + optionId);
                if (span) span.remove();
                
                <?php if ($helper->isDependentEnabled()) { ?>
                // dependent
                var lis = ul.getElementsByTagName('li');
                for (i=0; i < lis.length; i++) {
                    lis[i].hide();
                }
                for (i=0; i < el.options.length; i++) {
                    if (el.options[i].value) {
                        var li = $('swatch_' + el.options[i].value);
                        if (li) li.show();
                    }
                }
                <?php } ?>
                
                if (!el.value) return;
                var li = $('swatch_' + el.value);
                if (!li) return;
                li.down('.swatch').removeClassName('swatch').addClassName('swatch-selected');
                
                // change title
                if (el.options[el.selectedIndex].text!='') {
                    ul.up('dl').down('dt').innerHTML += '<span id="span_swatch_' + optionId + '"> - ' + el.options[el.selectedIndex].text + '</span>';
                }
            }
        };
        
        // images class
        optionImages = {
            showImage: function(el) {
                if (!el) return;
                
                var elIdArr = el.id.split('_');
                var optionId = 0;
                if (elIdArr[1]) optionId = elIdArr[1];
                
                var elValueArr = [];                    
                if (el.multiple) {
                    for (i=0; i < el.options.length; i++) {
                        if (el.options[i].selected) elValueArr.push(el.options[i].value);
                    }
                } else {
                    elValueArr.push(el.value);
                }
                
                if (!opConfig.config[optionId]) return;
                var imageHTML = '';
                
                // beside option variant
                var imageBox = $('customoptions_images_' + optionId);
                if (!imageBox) return;

                imageBox.hide();
                elValueArr.each(function(optionValueId) {
                    if (optionValueId!='' && opConfig.config[optionId][optionValueId] && opConfig.config[optionId][optionValueId].images) {
                        opConfig.config[optionId][optionValueId].images.each(function(image) {
                            if (image[1]) {
                                imageHTML += '<a href="'+image[1]+'" rel="mageworxLightbox[]" title="">'+
                                    '<img src="'+image[0]+'" title="" class="small-image-preview v-middle" />'+
                                '</a>';
                            } else {
                                imageHTML += '<div class="container-swatch-color small-image-preview v-middle"">'+
                                    '<div class="swatch-color" style="background:' + image[0] + ';">&nbsp;</div>'+
                                '</div>';
                            }                        
                        }.bind(this));
                    }
                }.bind(this));
                imageBox.innerHTML = imageHTML;
                imageBox.show();
                
            }
        };  
        
    <?php 
        //copy from /app/design/frontend/default/default/template/customoptions/catalog-product-view-options.phtml with remove "var"
        if ($helper->isDependentEnabled()) {             
    ?>
            dependentData = [];
            inGroupIdData = [];
            dependentChanges = {"m":[], "d":[]};
            dependentHide = <?php if ($helper->hideDependentOption()) echo 'true'; else echo 'false'; ?>;
            dependentDefault = [];
            
            dependentOptions = {
                select: function(el) {
                    var i, ii = 0;                    
                    if (el.type=='radio') {
                        var radios = this.upDiv(el).getElementsByClassName('radio');
                        for (i=0; i < radios.length; i++) {
                            this.returnSelect(radios[i]);
                        }                        
                    } else {                    
                        this.returnSelect(el);
                    }
                    
                    if (el.type && el.type=='checkbox' && !el.checked) return false;
                    if (el.disabled) return false;
                    if (el.value>0) {
                        // prepare value
                        var elValueArr = [];
                        if (el.multiple) {
                            for (i=0; i < el.options.length; i++) {
                                if (el.options[i].selected) elValueArr.push(el.options[i].value);
                            }
                        } else {
                            elValueArr.push(el.value);
                        }
                        var mElementId = el.id;
                        var dSelects = [];
                        var isRequire = false;
                        for (i=0; i < elValueArr.length; i++) {
                            if (!dependentData[elValueArr[i]]) continue;                            
                            dependentData[elValueArr[i]].each(function(IGI){
                                if (inGroupIdData[IGI]) {                                    
                                    for(var dElementId in inGroupIdData[IGI]) {
                                        if (dElementId!='disabled' && $(dElementId)) {
                                            var dElement = $(dElementId);
                                            if (!dependentChanges['m'][mElementId]) dependentChanges['m'][mElementId] = [];
                                            if (!dependentChanges['m'][mElementId][dElementId]) dependentChanges['m'][mElementId][dElementId] = [];

                                            if (!dependentChanges['d'][dElementId]) dependentChanges['d'][dElementId] = [];

                                            if (inGroupIdData[IGI].disabled) {
                                                if (!inGroupIdData[IGI].out_of_stock) dElement.disabled = false;
                                                if (dependentHide) {
                                                    if (dElement.type=='checkbox' || dElement.type=='radio') {
                                                        $(dElement).up('li').style.display = 'block';
                                                    }
                                                    dependentOptions.upDiv(dElement).style.display = 'block';
                                                }
                                                dependentChanges['m'][mElementId][dElementId]['disabled'] = true;
                                                
                                                if (dependentChanges['m'][mElementId][dElementId]['is_require']) {
                                                    isRequire = true;
                                                } else {
                                                    isRequire = $(dElement).hasClassName('required-dependent');
                                                }
                                                if (isRequire) {
                                                    $(dElement).removeClassName('required-dependent');
                                                    if (dElement.type=='checkbox' || dElement.type=='radio') {
                                                        $(dElement).addClassName('validate-one-required-by-name');
                                                    } else {
                                                        $(dElement).addClassName('required-entry');
                                                    }    
                                                }
                                                dependentChanges['m'][mElementId][dElementId]['is_require'] = isRequire;
                                            }
                                            
                                            
                                            if (inGroupIdData[IGI][dElementId] && (dElement.type=='select-one' || dElement.type=='select-multiple')) {
                                                // if [multi]select
                                                // if el not modified -> backup default options and clear
                                                if (!dependentChanges['d'][dElementId]['options']) {
                                                    dependentChanges['d'][dElementId]['options'] = [];
                                                    var opSelected = false;
                                                    for (ii=0; ii < dElement.options.length; ii++) {
                                                        if (dependentDefault[dElementId] && (dependentDefault[dElementId]==dElement.options[ii].value || dependentDefault[dElementId][dElement.options[ii].value])) opSelected = true; else opSelected = false;
                                                        if (dElement.options[ii].value) dependentChanges['d'][dElementId]['options']['s'+dElement.options[ii].value] = {'text':dElement.options[ii].text, 'selected':opSelected, 'sel-def':opSelected, 'disabled':dElement.options[ii].disabled};
                                                    }
                                                    if (dElement.multiple) dElement.length = 0; else dElement.length = 1; // clear select
                                                } else {
                                                    dependentOptions.rememberNewSelected(dElement, dElementId);
                                                }
                                                
                                                var selectValue = 's'+inGroupIdData[IGI][dElementId];
                                                if (dependentChanges['d'][dElementId]['options'][selectValue]) {
                                                    // commit changes
                                                    if (!dependentChanges['m'][mElementId][dElementId]['options']) dependentChanges['m'][mElementId][dElementId]['options'] = [];
                                                    dependentChanges['m'][mElementId][dElementId]['options'].push(selectValue);
                                                    // set [multi]select flag use
                                                    if (!dependentChanges['d'][dElementId]['options'][selectValue]['use']) dependentChanges['d'][dElementId]['options'][selectValue]['use'] = [];
                                                    if (dependentChanges['d'][dElementId]['options'][selectValue]['use'].indexOf(mElementId)==-1) dependentChanges['d'][dElementId]['options'][selectValue]['use'].push(mElementId);
                                                    dSelects.push(dElement); // after add data to this [multi]select
                                                }                                              
                                            } else {
                                                // if radio, checkbox, text, etc.
                                                if (!dependentChanges['d'][dElementId]['use']) dependentChanges['d'][dElementId]['use'] = [];
                                                if (dependentDefault[dElementId] && ($(dElementId).type=='checkbox' || $(dElementId).type=='radio') && dependentChanges['d'][dElementId]['use'].length==0) $(dElementId).click();
                                                if (dependentChanges['d'][dElementId]['use'].indexOf(mElementId)==-1) dependentChanges['d'][dElementId]['use'].push(mElementId);
                                            }
                                        }
                                    }
                                }

                            });
                        }
                        if (dSelects.length>0) {
                            for (i=0; i < dSelects.length; i++) {
                                var dElement = dSelects[i];
                                var dElementId = dElement.id;
                                // add data to [multi]select                                        
                                if (dElement.multiple) dElement.length = 0; else dElement.length = 1; // clear select
                                for(var opValue in dependentChanges['d'][dElementId]['options']) {
                                    if (!dependentChanges['d'][dElementId]['options'].hasOwnProperty(opValue) || !dependentChanges['d'][dElementId]['options'][opValue] || !dependentChanges['d'][dElementId]['options'][opValue]['use'] || dependentChanges['d'][dElementId]['options'][opValue]['use'].length==0) continue;
                                    var newOpt = new Option(dependentChanges['d'][dElementId]['options'][opValue]['text'], opValue.substr(1));
                                    newOpt.disabled = dependentChanges['d'][dElementId]['options'][opValue]['disabled'];
                                    if (dependentChanges['d'][dElementId]['options'][opValue]['selected']) {
                                        newOpt.selected = true;
                                        //if (!newOpt.disabled) setTimeout('dependentOptions.select($("'+dElementId+'"));', '100');
                                    }
                                    dElement.options.add(newOpt);
                                }
                                dElement.onchange();
                            }
                        }
                    }
                },

                // cancel changes and return default options params
                returnSelect: function(el) {
                    var mElementId = el.id;
                    var i = 0;
                    if (dependentChanges['m'][mElementId] && !dependentChanges['m'][mElementId]['is_used']) {
                        dependentChanges['m'][mElementId]['is_used'] = true;
                        //alert(mElementId);
                        for(var dElementId in dependentChanges['m'][mElementId]) {
                            if (!dependentChanges['m'][mElementId].hasOwnProperty(dElementId) || dElementId=='is_used' || !$(dElementId)) continue;
                            var dElement = $(dElementId);
                            var disableElFlag = true;
                            // disable dependent el
                            if (dependentChanges['m'][mElementId][dElementId]['disabled']) {
                                if (dependentChanges['m'][mElementId][dElementId]['options'] && dependentChanges['d'][dElementId]['options']) {
                                    // to [multi]select                                    
                                    this.rememberNewSelected(dElement, dElementId);
                                    
                                    // remove options if not use main el
                                    for (i=0; i < dependentChanges['m'][mElementId][dElementId]['options'].length; i++) {
                                        opValue = dependentChanges['m'][mElementId][dElementId]['options'][i];
                                        
                                        if (dependentChanges['d'][dElementId]['options'][opValue] && dependentChanges['d'][dElementId]['options'][opValue]['use'] && dependentChanges['d'][dElementId]['options'][opValue]['use'].length>0) {
                                            dependentChanges['d'][dElementId]['options'][opValue]['use'] = dependentChanges['d'][dElementId]['options'][opValue]['use'].without(mElementId);
                                            if (dependentChanges['d'][dElementId]['options'][opValue]['use'].length==0) {
                                                $$("#"+dElementId+" option[value='"+opValue.substr(1)+"']").each(function(elOp){
                                                    elOp.remove();
                                                });
                                            } else {
                                                disableElFlag = false;
                                            }
                                        }
                                    }
                                    if (disableElFlag && (dElement.length>1 || (dElement.multiple && dElement.length>0))) disableElFlag = false;
                                    
                                } else {                                    
                                    // to radio, checkbox, text, etc.
                                    if (dependentChanges['d'][dElementId]['use'] && dependentChanges['d'][dElementId]['use'].length>0) {                                        
                                        dependentChanges['d'][dElementId]['use'] = dependentChanges['d'][dElementId]['use'].without(mElementId);
                                        if (dependentChanges['d'][dElementId]['use'].length>0) disableElFlag = false;
                                    }
                                }
                                if (disableElFlag) {
                                
                                    optionImages.showImage(dElement);
                                
                                    dElement.disabled = true;
                                    
                                    // restore default if [multi]select
                                    if (dElement.type=='select-one' || dElement.type=='select-multiple') {
                                        for(var opValue in dependentChanges['d'][dElementId]['options']) {
                                            if (!dependentChanges['d'][dElementId]['options'].hasOwnProperty(opValue) || !dependentChanges['d'][dElementId]['options'][opValue]) continue;
                                            var newOpt = new Option(dependentChanges['d'][dElementId]['options'][opValue]['text'], opValue.substr(1));
                                            newOpt.disabled = dependentChanges['d'][dElementId]['options'][opValue]['disabled'];
                                            newOpt.selected = dependentChanges['d'][dElementId]['options'][opValue]['sel-def'];
                                            dElement.options.add(newOpt);
                                        }
                                    }
                                    
                                    // hide
                                    if (dependentHide) {
                                        var hideDivFlag = true;
                                        if (dElement.type=='checkbox' || dElement.type=='radio') {
                                            $(dElement).up('li').style.display = 'none';
                                            ulEl = $(dElement).up('li').up('ul');
                                            if (ulEl) {
                                                lis = ulEl.getElementsByTagName('li');
                                                for (i=0; i < lis.length; i++) {
                                                    if (lis[i].style.display=='block') {
                                                        hideDivFlag = false;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        if (hideDivFlag) this.upDiv(dElement).style.display = 'none';
                                    }
                                    
                                    // require
                                    if (dependentChanges['m'][mElementId][dElementId]['is_require']) {
                                        if (dElement.type=='checkbox' || dElement.type=='radio') {
                                            $(dElement).removeClassName('validate-one-required-by-name');
                                        } else {
                                            $(dElement).removeClassName('required-entry');
                                        }                                
                                        $(dElement).addClassName('required-dependent');
                                    }
                                }
                            }
                            // return dependent->dependent etc..
                            if (disableElFlag && (dElement.type=='checkbox' || dElement.type=='radio') && dElement.checked) {
                                dElement.checked = false;
                                dependentOptions.returnSelect(dElement);
                            } else if (dElement.type=='select-one' || dElement.type=='select-multiple') {                            
                                dependentOptions.select(dElement); // that's right!
                            } else if (disableElFlag && (dElement.type=='text' || dElement.type=='textarea' || dElement.type=='file')) {
                                if (dependentDefault[dElementId]) dElement.value = dependentDefault[dElementId]; else dElement.value = '';
                            }                            
                        }
                        delete dependentChanges['m'][mElementId];
                    }    
                },
                
                rememberNewSelected: function(dElement, dElementId) {
                    // remember new selected
                    if (dependentChanges['d'][dElementId] && dependentChanges['d'][dElementId]['options']) {
                        var opSelected = false;
                        for (i=0; i < dElement.options.length; i++) {
                            if (dependentChanges['d'][dElementId]['options']['s'+dElement.options[i].value]) {
                                if (dElement.options[i].selected && dElement.options[i].value>0) opSelected = true; else opSelected = false;
                                dependentChanges['d'][dElementId]['options']['s'+dElement.options[i].value]['selected'] = opSelected;
                            }
                        }
                    }
                },
                
                // for ie to work
                upDiv: function(el) {            
                    if (el.type=='checkbox' || el.type=='radio') return el.up(4); else return el.up('div.option');                    
                }
            }
    <?php } ?>
    </script>




    <div id="product_composite_configure_fields_options" class="<?php echo $this->getIsLastFieldset() ? 'last-fieldset' : '' ?>">
        <h4><?php echo Mage::helper('catalog')->__('Custom Options') ?></h4>
        <div class="product-options">
            <?php foreach($options as $option): ?>
                <?php echo $this->getOptionHtml($option); ?>
            <?php endforeach;?>
        </div>
    </div>

    <?php if ($helper->isDependentEnabled()) { ?>    
        <script type="text/javascript">
            // apply edit or options default
            $$("select[id^='select_']").each(function(element){
                element.onchange();
            });
            
            for(var elementId in dependentDefault) {
                if (!dependentDefault.hasOwnProperty(elementId)) continue;
                if ($(elementId) && $(elementId).up('div') && $(elementId).up('div').style.display!="none") {
                    dependentOptions.returnSelect($(elementId));
                    if ($(elementId).type=='select-one' || $(elementId).type=='text' || $(elementId).type=='textarea') {
                        $(elementId).value = dependentDefault[elementId];
                    } else if ($(elementId).type=='select-multiple') {
                        el = $(elementId);
                        for (i=0; i < el.options.length; i++) {
                            if (dependentDefault[elementId][el.options[i].value]) el.options[i].selected = true;
                        }
                    } else if ($(elementId).type=='checkbox' || $(elementId).type=='radio') {
                        if ($(elementId).checked!=true) $(elementId).click();
                    }    
                    dependentOptions.select($(elementId));
                }
            }
        </script>
    <?php } ?> 

<?php endif; ?>
